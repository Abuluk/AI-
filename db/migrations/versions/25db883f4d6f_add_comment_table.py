"""add_comment_table

Revision ID: 25db883f4d6f
Revises: b1d8239009fc
Create Date: 2025-06-28 16:07:05.555990

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '25db883f4d6f'
down_revision: Union[str, None] = 'b1d8239009fc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('comments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=True),
    sa.Column('buy_request_id', sa.Integer(), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('reply_to_user_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('like_count', sa.Integer(), nullable=False, server_default='0'),
    sa.ForeignKeyConstraint(['buy_request_id'], ['buy_requests.id'], ),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ),
    sa.ForeignKeyConstraint(['parent_id'], ['comments.id'], ),
    sa.ForeignKeyConstraint(['reply_to_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_comments_id'), 'comments', ['id'], unique=False)
    op.create_table(
        'comment_likes',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('user_id', sa.Integer(), sa.ForeignKey('users.id')),
        sa.Column('comment_id', sa.Integer(), sa.ForeignKey('comments.id')),
        sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.UniqueConstraint('user_id', 'comment_id', name='_user_comment_uc')
    )
    op.add_column('buy_requests', sa.Column('like_count', sa.Integer(), nullable=False, server_default='0'))
    op.add_column('items', sa.Column('like_count', sa.Integer(), nullable=False, server_default='0'))
    op.create_table(
        'item_likes',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('user_id', sa.Integer(), sa.ForeignKey('users.id')),
        sa.Column('item_id', sa.Integer(), sa.ForeignKey('items.id')),
        sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.UniqueConstraint('user_id', 'item_id', name='_user_item_uc')
    )
    op.create_table(
        'buy_request_likes',
        sa.Column('id', sa.Integer(), primary_key=True),
        sa.Column('user_id', sa.Integer(), sa.ForeignKey('users.id')),
        sa.Column('buy_request_id', sa.Integer(), sa.ForeignKey('buy_requests.id')),
        sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.UniqueConstraint('user_id', 'buy_request_id', name='_user_buyreq_uc')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_comments_id'), table_name='comments')
    op.drop_table('comments')
    op.drop_table('comment_likes')
    op.drop_column('comments', 'like_count')
    op.drop_column('buy_requests', 'like_count')
    op.drop_column('items', 'like_count')
    op.drop_table('item_likes')
    op.drop_table('buy_request_likes')
    # ### end Alembic commands ###
